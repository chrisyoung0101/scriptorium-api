python3 collect_files.py
collect_files
/usr/local/bin/collect_files

/Users/chrisyoung/IdeaProjects/scriptorium-api


OpenApiConfig.java, SecurityConfig.java, WebConfig.java, DocumentController.java, DocumentResponse.java, GlobalExceptionHandler.java, ResourceNotFoundException.java, DocumentEntity.java, DocumentRepository.java, DocumentService.java, ScriptoriumApiApplication.java,Dockerfile, application.yaml, build.gradle

manual docker container restart :
docker run --rm -p 8081:8081 \
-e DB_PASSWORD=9y90F3y852WQefuSKQhuW0ZQbVBIeY8Q \
--name scriptorium-api-container scriptorium-api:latest



Verify connection to db via docker container or something :
docker run --rm -p 8081:8081 \
  -e DB_PASSWORD=9y90F3y852WQefuSKQhuW0ZQbVBIeY8Q \
  --name scriptorium-api-container scriptorium-api:latest


To stop a running Docker container, you can use one of the following methods:

### 1. **Using `docker stop` Command**
If you know the container's name or ID:
```bash
docker stop scriptorium-api-container
```

If you don't know the container name, you can list all running containers first:
```bash
docker ps
```
Find the `CONTAINER ID` or `NAME` of the container from the output, and then stop it:
```bash
docker stop <CONTAINER_ID or NAME>
```

---

### 2. **Stop and Remove the Container (Optional)**
If the container was run with the `--rm` flag (like in your case), it will automatically remove itself when stopped. If it’s not using `--rm`, you can remove it manually:
```bash
docker rm scriptorium-api-container
```

---

### 3. **Force Stop (If Needed)**
If the container doesn’t stop gracefully, you can force it:
```bash
docker kill scriptorium-api-container
```

This will immediately terminate the container.

---

### 4. **Verify the Container is Stopped**
Run the following to confirm it’s no longer running:
```bash
docker ps
```

Let me know if you need further assistance!


Here is a list of all the command-line commands we've discussed and used in this chat so far:

### PostgreSQL Commands
1. **Connecting to PostgreSQL via `psql`:**
   ```bash
   psql -h dpg-cu7bvg5svqrc7397mv50-a.singapore-postgres.render.com -U scriptorium_db_user -d scriptorium_db
   ```
2. **Helpful Commands within `psql`:**
   - General help in `psql`:
     ```bash
     help
     ```
   - Quitting `psql`:
     ```bash
     \q
     ```

---

### Docker Commands
1. **Running a Docker container with your application:**
   ```bash
   docker run --rm -p 8081:8081 \
     -e DB_PASSWORD=9y90F3y852WQefuSKQhuW0ZQbVBIeY8Q \
     --name scriptorium-api-container scriptorium-api:latest
   ```
2. **Resolving Docker port conflicts:**
   - To list running Docker containers:
     ```bash
     docker ps
     ```
   - To stop a specific container:
     ```bash
     docker stop <container-id>
     ```

---

These commands cover the steps taken to connect to your database, interact with it, and run your Dockerized Spring Boot application. Let me know if you need clarification or further assistance!